// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PricePulse.Data;

#nullable disable

namespace PricePulse.Migrations
{
    [DbContext(typeof(PricePulseDbContext))]
    partial class PricePulseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PricePulse.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<int>("CompanyProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("company_profile_id");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("StateProvince")
                        .HasColumnType("text");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyProfileId")
                        .IsUnique();

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Authentication", b =>
                {
                    b.Property<int>("AuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("auth_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthId"));

                    b.Property<int>("AuthenticationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_password_change");

                    b.Property<string>("RecoveryEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("recovery_email");

                    b.Property<string>("SecurityAnswer")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("text");

                    b.Property<string>("SecurityQuestions")
                        .HasColumnType("json")
                        .HasColumnName("security_questions");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("AuthId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("authentications", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.CompanyProfile", b =>
                {
                    b.Property<int>("CompanyProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_profile_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyProfileId"));

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyProfileName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_profile");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_website");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("industry");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("CompanyProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("company_profiles", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Competitor", b =>
                {
                    b.Property<int>("CompetitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("competitor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetitorId"));

                    b.Property<int>("CompanyProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("company_profile_id");

                    b.Property<string>("CompetitorCompanyProfile")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_profile");

                    b.Property<string>("CompetitorName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("competitor_name");

                    b.Property<string>("CompetitorWebsite")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("competitor_website");

                    b.Property<string>("CompetitorWebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("CompetitorId");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("competitors", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProduct", b =>
                {
                    b.Property<int>("CompProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comp_product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompProductId"));

                    b.Property<string>("CProductName")
                        .HasColumnType("text")
                        .HasColumnName("c_product_name");

                    b.Property<string>("CProductWebsiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("c_product_website_url");

                    b.Property<int?>("CompetitorId")
                        .HasColumnType("integer")
                        .HasColumnName("competitor_id");

                    b.Property<int?>("OwnProductId")
                        .HasColumnType("integer")
                        .HasColumnName("own_product_id");

                    b.HasKey("CompProductId");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("OwnProductId");

                    b.ToTable("competitor_products", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProductAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompetitorCurrency")
                        .HasColumnType("text")
                        .HasColumnName("competitor_currency");

                    b.Property<string>("CompetitorDomain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("competitor_domain");

                    b.Property<string>("CompetitorPrice")
                        .HasColumnType("text")
                        .HasColumnName("competitor_price");

                    b.Property<string>("CompetitorProductUrl")
                        .HasColumnType("text")
                        .HasColumnName("competitor_product_url");

                    b.Property<DateTime>("DiscoveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discovered_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("text")
                        .HasColumnName("product_category");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text")
                        .HasColumnName("product_description");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("product_image_url");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.HasKey("Id");

                    b.ToTable("competitor_product_analyses", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProductRetailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Availability")
                        .HasColumnType("text")
                        .HasColumnName("availability");

                    b.Property<int>("CompetitorProductAnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("competitor_product_analysis_id");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Price")
                        .HasColumnType("text")
                        .HasColumnName("price");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("text")
                        .HasColumnName("product_url");

                    b.Property<string>("Rating")
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<string>("RetailerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("retailer_name");

                    b.Property<string>("RetailerUrl")
                        .HasColumnType("text")
                        .HasColumnName("retailer_url");

                    b.Property<string>("ReviewsCount")
                        .HasColumnType("text")
                        .HasColumnName("reviews_count");

                    b.Property<string>("ShippingInfo")
                        .HasColumnType("text")
                        .HasColumnName("shipping_info");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorProductAnalysisId");

                    b.ToTable("competitor_product_retailers", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactId"));

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PreferredContactMethod")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("preferred_contact_method");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("secondary_email");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ContactId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.OwnProduct", b =>
                {
                    b.Property<int>("OwnProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("own_product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OwnProductId"));

                    b.Property<int>("CompanyProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("company_profile_id");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductWebsiteUrl")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_website_url");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("OwnProductId");

                    b.HasIndex("CompanyProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("own_products", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("price_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PriceId"));

                    b.Property<int?>("CompProductId")
                        .HasColumnType("integer")
                        .HasColumnName("comp_product_id");

                    b.Property<int?>("CompetitorProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int?>("OwnProductId")
                        .HasColumnType("integer")
                        .HasColumnName("own_product_id");

                    b.Property<DateTime?>("PriceDate")
                        .HasColumnType("date")
                        .HasColumnName("price_date");

                    b.Property<decimal?>("PriceValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("numeric");

                    b.HasKey("PriceId");

                    b.HasIndex("CompProductId");

                    b.HasIndex("OwnProductId");

                    b.ToTable("prices", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.RegistrationVerification", b =>
                {
                    b.Property<int>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("verification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VerificationId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expiry");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<string>("VerificationStatus")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("verification_status");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("verification_token");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VerificationId");

                    b.HasIndex("UserId");

                    b.ToTable("registration_verifications", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("session_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_info");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_timestamp");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime?>("LoginTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_timestamp");

                    b.Property<string>("SessionToken")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("account_status");

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("PricePulse.Models.Address", b =>
                {
                    b.HasOne("PricePulse.Models.CompanyProfile", "CompanyProfile")
                        .WithOne("Address")
                        .HasForeignKey("PricePulse.Models.Address", "CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProfile");
                });

            modelBuilder.Entity("PricePulse.Models.Authentication", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithOne("Authentication")
                        .HasForeignKey("PricePulse.Models.Authentication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.CompanyProfile", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithMany("CompanyProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.Competitor", b =>
                {
                    b.HasOne("PricePulse.Models.CompanyProfile", "CompanyProfile")
                        .WithMany("Competitors")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProfile");
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProduct", b =>
                {
                    b.HasOne("PricePulse.Models.Competitor", "Competitor")
                        .WithMany("CompetitorProducts")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PricePulse.Models.OwnProduct", "OwnProduct")
                        .WithMany("CompetitorProducts")
                        .HasForeignKey("OwnProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Competitor");

                    b.Navigation("OwnProduct");
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProductRetailer", b =>
                {
                    b.HasOne("PricePulse.Models.CompetitorProductAnalysis", "CompetitorProductAnalysis")
                        .WithMany("Retailers")
                        .HasForeignKey("CompetitorProductAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitorProductAnalysis");
                });

            modelBuilder.Entity("PricePulse.Models.Contact", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithOne("Contact")
                        .HasForeignKey("PricePulse.Models.Contact", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.OwnProduct", b =>
                {
                    b.HasOne("PricePulse.Models.CompanyProfile", "CompanyProfile")
                        .WithMany("OwnProducts")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PricePulse.Models.User", "User")
                        .WithMany("OwnProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.Price", b =>
                {
                    b.HasOne("PricePulse.Models.CompetitorProduct", "CompetitorProduct")
                        .WithMany("Prices")
                        .HasForeignKey("CompProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PricePulse.Models.OwnProduct", "OwnProduct")
                        .WithMany("Prices")
                        .HasForeignKey("OwnProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompetitorProduct");

                    b.Navigation("OwnProduct");
                });

            modelBuilder.Entity("PricePulse.Models.Profile", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("PricePulse.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.RegistrationVerification", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithMany("RegistrationVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.Session", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.UserRole", b =>
                {
                    b.HasOne("PricePulse.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PricePulse.Models.CompanyProfile", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Competitors");

                    b.Navigation("OwnProducts");
                });

            modelBuilder.Entity("PricePulse.Models.Competitor", b =>
                {
                    b.Navigation("CompetitorProducts");
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProduct", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("PricePulse.Models.CompetitorProductAnalysis", b =>
                {
                    b.Navigation("Retailers");
                });

            modelBuilder.Entity("PricePulse.Models.OwnProduct", b =>
                {
                    b.Navigation("CompetitorProducts");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("PricePulse.Models.User", b =>
                {
                    b.Navigation("Authentication");

                    b.Navigation("CompanyProfiles");

                    b.Navigation("Contact");

                    b.Navigation("OwnProducts");

                    b.Navigation("Profile");

                    b.Navigation("RegistrationVerifications");

                    b.Navigation("Sessions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
