@model PricePulse.ViewModels.AccountInfoViewModel
@{
    ViewData["Title"] = "PricePulse - User Profile";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <link href="https://fonts.googleapis.com" rel="preconnect"/>
    <link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect"/>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&amp;display=swap" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet"/>
    <script>
        tailwind.config = {
          theme: {
            extend: {
              colors: {
                "primary": "#5d288a",
                "accent": "#f94037",
                "secondary-accent": "#0cb8ca",
                "background": "#eff9f2",
                "text-primary": "#1a1a1a",
                "text-secondary": "#555555"
              },
              fontFamily: {
                "display": ["Inter", "sans-serif"]
              },
              borderRadius: {
                "DEFAULT": "0.5rem",
                "lg": "1rem",
                "xl": "1.5rem"
              },
            },
          },
        }
    </script>
    <style>
        .material-symbols-outlined {
          font-variation-settings:
          'FILL' 0,
          'wght' 400,
          'GRAD' 0,
          'opsz' 24
        }
        .form-input {
          width: 100%;
          background-color: white;
          border: 2px solid #e5e7eb;
          border-radius: 0.375rem;
          padding: 0.75rem 1rem;
          color: #1a202c;
          transition: border-color 0.3s;
        }
        .form-input:focus {
          border-color: #5d288a;
          outline: none;
        }
        .form-label {
          font-size: 0.875rem;
          font-weight: 600;
          color: #4a5568;
          margin-bottom: 0.5rem;
          display: block;
        }
    </style>
</head>
<body class="bg-background font-display text-text-primary">
    <div class="flex min-h-screen">
        <aside class="w-64 bg-white border-r border-gray-200 flex-col justify-between hidden lg:flex">
            <div class="p-6">
                <div class="flex items-center space-x-3 mb-12">
                    <img src="/images/logo.png" alt="PricePulse logo" class="logo" />
                </div>
                <nav class="space-y-3">
                    <a class="flex items-center space-x-3 px-4 py-3 rounded-lg text-text-secondary hover:bg-primary/10 hover:text-primary transition-colors" href="@Url.Action("Index", "Home")">
                        <span class="material-symbols-outlined">dashboard</span>
                        <span class="font-medium">Dashboard</span>
                    </a>
                    <a class="flex items-center space-x-3 px-4 py-3 rounded-lg text-text-secondary hover:bg-primary/10 hover:text-primary transition-colors" href="@Url.Action("MyProducts", "ProductDiscovery")">
                        <span class="material-symbols-outlined">monitoring</span>
                        <span class="font-medium">Products</span>
                    </a>
                    <a class="flex items-center space-x-3 px-4 py-3 rounded-lg text-text-secondary hover:bg-primary/10 hover:text-primary transition-colors" href="@Url.Action("Companies", "Account")">
                        <span class="material-symbols-outlined">business_center</span>
                        <span class="font-medium">Companies</span>
                    </a>
                    <a class="flex items-center space-x-3 px-4 py-3 rounded-lg bg-primary/10 text-primary font-bold" href="@Url.Action("Info", "Account")">
                        <span class="material-symbols-outlined">person</span>
                        <span>Profile</span>
                    </a>
                    
                </nav>
            </div>
            <div class="p-6 border-t border-gray-200">
                <form method="post" action="/Account/Logout" class="ml-auto">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="text-text-muted hover:text-accent transition-colors">
                        <span class="material-symbols-outlined">logout</span>
                    </button>
                </form>
            </div>
        </aside>
        
        <main class="flex-grow">
            <header class="sticky top-0 z-40 bg-background/80 backdrop-blur-sm">
                <div class="container mx-auto px-4 sm:px-6 lg:px-8">
                    <div class="flex items-center justify-between h-24">
                        <button class="lg:hidden text-text-secondary">
                            <span class="material-symbols-outlined text-3xl">menu</span>
                        </button>
                        <div class="hidden sm:block">
                            <h2 class="text-3xl font-bold text-text-primary">Account Info</h2>
                        </div>
                    </div>
                </div>
            </header>
            
            <div class="p-4 sm:p-6 lg:p-8">
                <div class="max-w-5xl mx-auto">
                    <div class="bg-white p-8 sm:p-10 rounded-xl mb-8 border-2 border-gray-200">
                        <div class="flex flex-col sm:flex-row items-center sm:space-x-8">
                            <div class="relative mb-6 sm:mb-0">
                                @if (!string.IsNullOrWhiteSpace(Model.AvatarUrl))
                                {
                                    <div class="w-32 h-32 rounded-full ring-4 ring-offset-4 ring-offset-white ring-primary bg-cover bg-center" style='background-image: url("@Model.AvatarUrl");'></div>
                                }
                                else
                                {
                                    <div class="w-32 h-32 rounded-full ring-4 ring-offset-4 ring-offset-white ring-primary bg-gradient-to-br from-accent to-secondary-accent flex items-center justify-center text-white font-bold text-4xl">
                                        @(Model.FirstName?.FirstOrDefault().ToString().ToUpper() ?? "U")
                                    </div>
                                }
                                <input type="file" id="avatar" name="avatar" accept="image/*" style="display: none;" onchange="uploadAvatar(this)" />
                                <button type="button" onclick="document.getElementById('avatar').click();" class="absolute bottom-1 right-1 bg-accent p-2 rounded-full text-white hover:bg-accent/90 transition-transform transform hover:scale-110 shadow-md">
                                    <span class="material-symbols-outlined text-lg">photo_camera</span>
                                </button>
                            </div>
                            <div class="text-center sm:text-left">
                                <h2 class="text-4xl font-black text-text-primary">@(Model.FirstName ?? "User") @(Model.LastName ?? "")</h2>
                                <p class="text-lg text-text-secondary mt-1">@Model.Email</p>
                                <div class="mt-4 flex items-center justify-center sm:justify-start space-x-3">
                                    <span class="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-bold bg-secondary-accent text-white">Pro Member</span>
                                    <span class="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-bold bg-green-500 text-white">Active</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-white p-8 sm:p-10 rounded-xl border-2 border-gray-200 mb-8">
                        <div class="flex items-center justify-between mb-8">
                            <h3 class="text-2xl font-black text-primary">Profile Information</h3>
                            <button class="flex items-center space-x-2 text-sm font-bold text-accent hover:underline" onclick="toggleEdit('profile')">
                                <span class="material-symbols-outlined text-base">edit</span>
                                <span>Edit</span>
                            </button>
                        </div>
                        <form id="profileForm" class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
                            @Html.AntiForgeryToken()
                            <div>
                                <label class="form-label" for="firstName">First Name</label>
                                <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="firstName" name="firstName" type="text" value="@(Model.FirstName ?? "")" placeholder="John" readonly/>
                            </div>
                            <div>
                                <label class="form-label" for="lastName">Last Name</label>
                                <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="lastName" name="lastName" type="text" value="@(Model.LastName ?? "")" placeholder="Doe" readonly/>
                            </div>
                            <div>
                                <label class="form-label" for="email">Email Address</label>
                                <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="email" name="Email" type="email" value="@Model.Email" placeholder="john@example.com" readonly/>
                            </div>
                            <div>
                                <label class="form-label" for="phone">Phone Number</label>
                                <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="phone" name="phoneNumber" type="tel" value="@(Model.PhoneNumber ?? "")" placeholder="+1 (555) 123-4567" readonly/>
                            </div>
                            <div class="md:col-span-2">
                                <label class="form-label" for="bio">Bio</label>
                                <textarea class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="bio" name="bio" rows="4" placeholder="Tell us about yourself..." readonly>@(Model.Bio ?? "")</textarea>
                            </div>
                            <div class="md:col-span-2 flex justify-end space-x-4" id="profileButtons" style="display: none;">
                                <button type="button" onclick="cancelEdit()" class="px-6 py-3 bg-gray-200 text-gray-700 rounded-full font-bold hover:bg-gray-300 transition-colors">
                                    Cancel
                                </button>
                                <button type="button" onclick="saveProfileInfo()" class="px-6 py-3 bg-accent text-white rounded-full font-bold hover:bg-accent/90 transition-colors">
                                    Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                    
                    <div class="bg-white p-8 sm:p-10 rounded-xl border-2 border-gray-200 mb-8">
                        <div class="flex items-center justify-between mb-8">
                            <h3 class="text-2xl font-black text-secondary-accent">Account Settings</h3>
                            <button class="flex items-center space-x-2 text-sm font-bold text-accent hover:underline" onclick="toggleEdit('account')">
                                <span class="material-symbols-outlined text-base">edit</span>
                                <span>Edit</span>
                            </button>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
                            <div>
                                <label class="form-label" for="username">Username</label>
                                <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="username" type="text" value="@(Model.Email?.Split('@')[0] ?? "")" placeholder="username" readonly/>
                            </div>
                            <div>
                                <label class="form-label" for="oldPassword">Current Password</label>
                                <div class="relative">
                                    <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="oldPassword" name="oldPassword" type="password" placeholder="Enter current password" />
                                    <button class="absolute inset-y-0 right-0 flex items-center px-4 text-text-secondary" onclick="togglePassword('oldPassword')">
                                        <span class="material-symbols-outlined text-base" id="oldPasswordIcon">visibility_off</span>
                                    </button>
                                </div>
                            </div>
                            <div>
                                <label class="form-label" for="newPassword">New Password</label>
                                <div class="relative">
                                    <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="newPassword" name="newPassword" type="password" placeholder="Enter new password" />
                                    <button class="absolute inset-y-0 right-0 flex items-center px-4 text-text-secondary" onclick="togglePassword('newPassword')">
                                        <span class="material-symbols-outlined text-base" id="newPasswordIcon">visibility_off</span>
                                    </button>
                                </div>
                            </div>
                            <div>
                                <label class="form-label" for="confirmPassword">Confirm New Password</label>
                                <div class="relative">
                                    <input class="block w-full px-4 py-3 rounded-lg border-2 border-gray-200 bg-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition" id="confirmPassword" name="confirmPassword" type="password" placeholder="Confirm new password" />
                                    <button class="absolute inset-y-0 right-0 flex items-center px-4 text-text-secondary" onclick="togglePassword('confirmPassword')">
                                        <span class="material-symbols-outlined text-base" id="confirmPasswordIcon">visibility_off</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="mt-6 flex justify-end">
                            <button type="button" onclick="changePassword()" class="px-6 py-3 bg-accent text-white rounded-full font-bold hover:bg-accent/90 transition-colors">
                                Change Password
                            </button>
                        </div>
                    </div>
                    
                    <form id="passwordForm" method="post" action="@Url.Action("ChangePassword", "Account")" class="hidden">
                        <input type="hidden" name="oldPassword" id="passwordOldPassword" />
                        <input type="hidden" name="newPassword" id="passwordNewPassword" />
                        <input type="hidden" name="confirmPassword" id="passwordConfirmPassword" />
                    </form>
                    
                </div>
            </div>
        </main>
    </div>

    <script>
        function toggleEdit(section) {
            const form = document.getElementById(section + 'Form');
            const inputs = form.querySelectorAll('input, textarea');
            const buttons = document.getElementById(section + 'Buttons');
            const editButton = document.querySelector(`[onclick="toggleEdit('${section}')"]`);
            
            // Toggle readonly state
            inputs.forEach(input => {
                if (input.type !== 'file' && input.type !== 'password') {
                    input.readOnly = !input.readOnly;
                    if (input.readOnly) {
                        input.classList.add('bg-gray-50');
                        input.classList.remove('bg-white/50');
                    } else {
                        input.classList.remove('bg-gray-50');
                        input.classList.add('bg-white/50');
                    }
                }
            });
            
            // Ensure form fields are not disabled when in edit mode
            if (buttons && buttons.style.display === 'flex') {
                inputs.forEach(input => {
                    if (input.type !== 'file' && input.type !== 'password') {
                        input.disabled = false;
                        input.readOnly = false;
                    }
                });
            }
            
            // Ensure form can be submitted when in edit mode
            if (buttons && buttons.style.display === 'flex') {
                const form = document.getElementById('profileForm');
                if (form) {
                    form.style.pointerEvents = 'auto';
                }
            }
            
            // Toggle button visibility
            if (buttons) {
                if (buttons.style.display === 'none') {
                    buttons.style.display = 'flex';
                    editButton.innerHTML = '<span class="material-symbols-outlined text-base">close</span><span>Cancel</span>';
                } else {
                    buttons.style.display = 'none';
                    editButton.innerHTML = '<span class="material-symbols-outlined text-base">edit</span><span>Edit</span>';
                }
            }
        }
        
        function togglePassword(fieldId) {
            const passwordInput = document.getElementById(fieldId);
            const passwordIcon = document.getElementById(fieldId + 'Icon');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                passwordIcon.textContent = 'visibility';
            } else {
                passwordInput.type = 'password';
                passwordIcon.textContent = 'visibility_off';
            }
        }

        function changePassword() {
            const oldPassword = document.getElementById('oldPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (!oldPassword || !newPassword || !confirmPassword) {
                alert('Please fill in all password fields.');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                alert('New passwords do not match.');
                return;
            }
            
            if (newPassword.length < 8) {
                alert('New password must be at least 8 characters long.');
                return;
            }
            
            // Copy values to hidden form
            document.getElementById('passwordOldPassword').value = oldPassword;
            document.getElementById('passwordNewPassword').value = newPassword;
            document.getElementById('passwordConfirmPassword').value = confirmPassword;
            
            // Submit the password change form
            document.getElementById('passwordForm').submit();
        }
        
        function cancelEdit() {
            // Reset form to original values
            const form = document.getElementById('profileForm');
            const inputs = form.querySelectorAll('input, textarea');
            
            inputs.forEach(input => {
                if (input.type !== 'file' && input.type !== 'password') {
                    input.readOnly = true;
                    input.classList.add('bg-gray-50');
                    input.classList.remove('bg-white/50');
                }
            });
            
            // Hide save/cancel buttons
            const buttons = document.getElementById('profileButtons');
            if (buttons) {
                buttons.style.display = 'none';
            }
            
            // Reset edit button
            const editButton = document.querySelector('[onclick="toggleEdit(\'profile\')"]');
            if (editButton) {
                editButton.innerHTML = '<span class="material-symbols-outlined text-base">edit</span><span>Edit</span>';
            }
        }
        

        function uploadAvatar(input) {
            if (input.files && input.files[0]) {
                const file = input.files[0];
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    // Update the avatar display immediately
                    const avatarDisplay = document.querySelector('.w-32.h-32.rounded-full');
                    if (avatarDisplay) {
                        avatarDisplay.style.backgroundImage = `url(${e.target.result})`;
                        avatarDisplay.style.backgroundSize = 'cover';
                        avatarDisplay.style.backgroundPosition = 'center';
                        avatarDisplay.innerHTML = ''; // Remove the initial letter
                    }
                };
                
                reader.readAsDataURL(file);
                
                // Don't auto-submit - let user click Save Changes button
            }
        }

        function saveProfileInfo() {
            const formData = new FormData();
            
            // Get form values
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const bio = document.getElementById('bio').value;
            const phoneNumber = document.getElementById('phone').value;
            const avatar = document.getElementById('avatar').files[0];
            
            // Add form data
            formData.append('firstName', firstName);
            formData.append('lastName', lastName);
            formData.append('bio', bio);
            formData.append('phoneNumber', phoneNumber);
            if (avatar) {
                formData.append('avatar', avatar);
            }
            
            // Show loading state
            const saveButton = document.querySelector('[onclick="saveProfileInfo()"]');
            const originalText = saveButton.textContent;
            saveButton.textContent = 'Saving...';
            saveButton.disabled = true;
            
            // Send AJAX request
            fetch('/Account/SaveInfo', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    // Success - show message and close edit mode
                    alert('Profile updated successfully!');
                    cancelEdit();
                    location.reload(); // Refresh to show updated data
                } else {
                    alert('Error saving profile. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving profile. Please try again.');
            })
            .finally(() => {
                // Reset button
                saveButton.textContent = originalText;
                saveButton.disabled = false;
            });
        }
    </script>
</body>
</html>